package main

import (
	"flag"
	"fmt"
	"time"

	"app/bootstrapping"
	"app/client"
	"app/lib"
	"app/matrix/normalization"
	"app/matrix/relu"
	"app/matrix/softmax"
	"app/matrix/softmax/innermax"
	"app/server"
	"app/utils"

	"github.com/Pro7ech/lattigo/rlwe"
)

var input_path = flag.String("i", "./data/example_AA_sequences.list", "input path")
var debug = flag.Bool("debug", false, "debug mode")
var dummy = flag.Bool("dummy", false, "uses dummy bootstrapping")
var verify = flag.Bool("verify", false, "verifies predictions against plaintext model")

func main() {

	lib.SamplesStart = 0
	lib.SamplesEnd = 100
	lib.SoftMaxParameters = SoftMaxParameters
	lib.Norm1Parameters = Norm1Parameters
	lib.Norm2Parameters = Norm2Parameters
	lib.ReLUParameters = ReLUParameters

	flag.Parse()

	now := time.Now()

	params := lib.NewParameters()

	fmt.Printf("Residual Parameters: logN=%d, logSlots=%d, H=%d, sigma=%f, logQP=%f, levels=%d, scale=2^%d\n",
		params.LogN(),
		params.LogMaxSlots(),
		params.XsHammingWeight(),
		params.Xe(), params.LogQP(),
		params.MaxLevel(),
		params.LogDefaultScale())

	kgen := rlwe.NewKeyGenerator(params)
	sk := kgen.GenSecretKeyNew()

	c := client.NewClient(params, sk)

	data, _, err := c.Load(*input_path, lib.SamplesStart, lib.SamplesEnd)
	//data, err := c.LoadFuzzy(lib.SamplesEnd - lib.SamplesStart)
	if err != nil {
		panic(err)
	}

	var btp *bootstrapping.Bootstrapper

	if *dummy {
		btp = lib.NewDummyBootstrapper(params, sk)
	} else {
		btp = lib.NewBootstrapper(params, sk)

		paramsBTP := btp.BootstrappingParameters()

		fmt.Printf("Bootstrapping Parameters: logN=%d, logSlots=%d, H(%d; %d), sigma=%f, logQP=%f, levels=%d, scale=2^%d\n",
			paramsBTP.BootstrappingParameters.LogN(),
			paramsBTP.BootstrappingParameters.LogMaxSlots(),
			paramsBTP.BootstrappingParameters.XsHammingWeight(),
			paramsBTP.EphemeralSecretWeight,
			paramsBTP.BootstrappingParameters.Xe(),
			paramsBTP.BootstrappingParameters.LogQP(),
			paramsBTP.BootstrappingParameters.QCount(),
			paramsBTP.BootstrappingParameters.LogDefaultScale())
	}

	btp.Debug = *debug

	s := server.NewServer("./weights", lib.NumCPU)

	if *debug {
		s.Sk = sk
	}

	km := c.GetKeyManager(lib.MaxConcurrentGaloisKeys, sk)

	s.SetKeyManager(km)

	ct, err := c.EncryptNew(data, 0, lib.NbMatPerCtIn)
	if err != nil {
		panic(err)
	}

	if ct, err = s.RunEncrypted(ct, btp); err != nil {
		panic(err)
	}

	result, err := c.DecryptNew(ct, 1, lib.Classes, lib.Cols-lib.Classes, lib.Rows*lib.NbMatPerCtIn)

	result = client.GetResults(result)

	if err = c.Dump("./result/pred_enc.csv", result); err != nil {
		panic(err)
	}

	fmt.Printf("Done: %s\n", time.Since(now))

	if *verify {
		pred := s.RunExact(data)
		accuracy, noise := utils.Precision(result, pred)
		fmt.Printf("PT vs. CT Accuracy: %f\n", accuracy)
		fmt.Printf("CT AVG Noise: %f\n", noise)
	}

}

/*
======== Samples
SoftMaxApproximate: -14.846192 14.617589
SoftMaxExact: -14.846256 14.616425
======== Fuzzing
SoftMaxApproximate: -25.143211 22.050325
*/
var SoftMaxParameters = softmax.Parameters{
	ExpMin:      -50.0,
	ExpMax:      2.0,
	ExpDeg:      31,
	InvMin:      1,
	InvMax:      50,
	InvDeg:      31,
	InvSqrtIter: 2,
	K:           lib.Rows,
	ToTVecSize:  lib.NbMatPerCtIn * lib.Rows * lib.Rows * lib.Split,
	MaxParameters: innermax.Parameters{
		AbsMax: 60,
		CoeffsString: [][]string{
			{"0", "0.864988119247", "0", "-0.288377920222", "0", "0.173071422437", "0", "-0.123816194144", "0", "0.096394642789", "0", "-0.078902169290", "0", "0.066945006659", "0", "-0.058020100531", "0", "0.051332266735", "0", "-0.046482123811", "0", "0.042138711193", "0", "-0.038528692000", "0", "0.035978793808", "0", "-0.033437153812", "0", "0.031680300044", "0", "-0.335319740231"},
			{"0", "1.266504742898", "0", "-0.404596922995", "0", "0.222869371220", "0", "-0.139872558754", "0", "0.091346906097", "0", "-0.059846068329", "0", "0.038558545509", "0", "-0.024103625427", "0", "0.014456545301", "0", "-0.008227671984", "0", "0.004387825299", "0", "-0.002157400000", "0", "0.000955384598", "0", "-0.000366901589", "0", "0.000113649172", "0", "-0.000023655795"},
		},
		CoeffsFloat: [][]float64{
			{0, 0.864988119247, 0, -0.288377920222, 0, 0.173071422437, 0, -0.123816194144, 0, 0.096394642789, 0, -0.078902169290, 0, 0.066945006659, 0, -0.058020100531, 0, 0.051332266735, 0, -0.046482123811, 0, 0.042138711193, 0, -0.038528692000, 0, 0.035978793808, 0, -0.033437153812, 0, 0.031680300044, 0, -0.335319740231},
			{0, 1.266504742898, 0, -0.404596922995, 0, 0.222869371220, 0, -0.139872558754, 0, 0.091346906097, 0, -0.059846068329, 0, 0.038558545509, 0, -0.024103625427, 0, 0.014456545301, 0, -0.008227671984, 0, 0.004387825299, 0, -0.002157400000, 0, 0.000955384598, 0, -0.000366901589, 0, 0.000113649172, 0, -0.000023655795},
		},
	},
}

/*
======== Samples
Norm1Approximate: 15.098900 119.320461
Norm1Exact: 15.096791 119.296482
======== Fuzzing
Norm1Approximate: 15.310283 179.325047
*/
var Norm1Parameters = normalization.Parameters{
	InvSqrtMin:     1,
	InvSqrtMax:     216,
	InvSqrtDeg:     63,
	InvSqrtIter:    1,
	BootstrapAfter: true,
	ToTVecSize:     lib.NbMatPerCtIn * lib.Rows * lib.Cols,
}

/*
======== Samples
Normalize2Approximate: 2.800122 256.607479
Normalize2Exact: 2.798778 256.573511
======== Fuzzing
Normalize2Approximate: 2.554534 270.796120
*/
var Norm2Parameters = normalization.Parameters{
	InvSqrtMin:      1,
	InvSqrtMax:      324,
	InvSqrtDeg:      63,
	InvSqrtIter:     1,
	BootstrapBefore: true,
	BootstrapAfter:  true,
	ToTVecSize:      lib.NbMatPerCtIn * lib.Rows * lib.Cols,
}

// hefloat.GenMinimaxCompositePolynomial(512, 10, 15, []int{255, 63}, bignum.Sign)
var ReLUParameters = relu.Parameters{
	CoeffsFloat: [][]float64{
		{0, 0.762624277144258, 0, -0.254211515271906, 0, 0.152531081324984, 0, -0.108955197152342, 0, 0.084747470549085, 0, -0.069343539898539, 0, 0.058680122421113, 0, -0.050860920656460, 0, 0.044882102944092, 0, -0.040162591936501, 0, 0.036342567537934, 0, -0.033187287163105, 0, 0.030537242627738, 0, -0.028280254591926, 0, 0.026334964806040, 0, -0.024640953695875, 0, 0.023152581142191, 0, -0.021834685992973, 0, 0.020659571285113, 0, -0.019605185886683, 0, 0.018653924354774, 0, -0.017791479861489, 0, 0.017005944397341, 0, -0.016287427012307, 0, 0.015627793892036, 0, -0.015020185138093, 0, 0.014458641481989, 0, -0.013938080246983, 0, 0.013454256086254, 0, -0.013003489160657, 0, 0.012582469889852, 0, -0.012188310772315, 0, 0.011818584714956, 0, -0.011471169358299, 0, 0.011144082208602, 0, -0.010835528004918, 0, 0.010544027490451, 0, -0.010268316272171, 0, 0.010007117380252, 0, -0.009759211324878, 0, 0.009523676838757, 0, -0.009299758927712, 0, 0.009086557598268, 0, -0.008883182776046, 0, 0.008689079447000, 0, -0.008503801958784, 0, 0.008326650096089, 0, -0.008156939797580, 0, 0.007994374502078, 0, -0.007838702698588, 0, 0.007689320685736, 0, -0.007545679774350, 0, 0.007407690391034, 0, -0.007275219515252, 0, 0.007147680309141, 0, -0.007024640549262, 0, 0.006906201634427, 0, -0.006792260548964, 0, 0.006682197924732, 0, -0.006575738409800, 0, 0.006473137378112, 0, -0.006374219070479, 0, 0.006278355690561, 0, -0.006185476549591, 0, 0.006095892798779, 0, -0.006009302100837, 0, 0.005925155423643, 0, -0.005843571689380, 0, 0.005764804336032, 0, -0.005688454663122, 0, 0.005614123364796, 0, -0.005542042188997, 0, 0.005472350447218, 0, -0.005404619815629, 0, 0.005338612481341, 0, -0.005274605927879, 0, 0.005212614485580, 0, -0.005152213176345, 0, 0.005093332218960, 0, -0.005036266451860, 0, 0.004980871936824, 0, -0.004926756919342, 0, 0.004874054720733, 0, -0.004823003247109, 0, 0.004773279625942, 0, -0.004724636835620, 0, 0.004677371100699, 0, -0.004631532976605, 0, 0.004586718771423, 0, -0.004542924408592, 0, 0.004500464831644, 0, -0.004459148885465, 0, 0.004418656087280, 0, -0.004379222425400, 0, 0.004340998783801, 0, -0.004303621081644, 0, 0.004267029785679, 0, -0.004231542119279, 0, 0.004197003873487, 0, -0.004163122004199, 0, 0.004130141881589, 0, -0.004098179933047, 0, 0.004066875633355, 0, -0.004036214250760, 0, 0.004006525553240, 0, -0.003977678630022, 0, 0.003949330875258, 0, -0.003921649808488, 0, 0.003894931300166, 0, -0.003868917177509, 0, 0.003843296648700, 0, -0.003818374760630, 0, 0.003794371286562, 0, -0.003770887286012, 0, 0.003747838810980, 0, -0.003725605666276, 0, 0.003703991432474, 0, -0.003682735746915, 0, 0.003662325133773, 0, -0.003642658276935, 0, 0.003622986831546, 0, -0.003603900452643, 0, 0.003586173102685, 0, -0.003568815850615, 0, 0.003551081703711, 0, -0.003533777979210, 0, 0.003518491264333, 0, -0.402770163388345},
		{0, 1.271394952644717, 0, -0.418908924174358, 0, 0.245571575138300, 0, -0.169385755345298, 0, 0.125729582605323, 0, -0.097009562066101, 0, 0.076478923882815, 0, -0.061000626530583, 0, 0.048918551516010, 0, -0.039273241583373, 0, 0.031466063228896, 0, -0.025099035277211, 0, 0.019892095009181, 0, -0.015637742316596, 0, 0.012175062649524, 0, -0.009374380172474, 0, 0.007127999698664, 0, -0.005344544030635, 0, 0.003945451102087, 0, -0.002862771540468, 0, 0.002037737358615, 0, -0.001419770737502, 0, 0.000965726103163, 0, -0.000639239547602, 0, 0.000410113532089, 0, -0.000253701067931, 0, 0.000150277688521, 0, -0.000084404781936, 0, 0.000044296653679, 0, -0.000021207592430, 0, 0.000008855556142, 0, -0.000003056946315},
	},
	CoeffsString: [][]string{
		{"0", "0.762624277144258", "0", "-0.254211515271906", "0", "0.152531081324984", "0", "-0.108955197152342", "0", "0.084747470549085", "0", "-0.069343539898539", "0", "0.058680122421113", "0", "-0.050860920656460", "0", "0.044882102944092", "0", "-0.040162591936501", "0", "0.036342567537934", "0", "-0.033187287163105", "0", "0.030537242627738", "0", "-0.028280254591926", "0", "0.026334964806040", "0", "-0.024640953695875", "0", "0.023152581142191", "0", "-0.021834685992973", "0", "0.020659571285113", "0", "-0.019605185886683", "0", "0.018653924354774", "0", "-0.017791479861489", "0", "0.017005944397341", "0", "-0.016287427012307", "0", "0.015627793892036", "0", "-0.015020185138093", "0", "0.014458641481989", "0", "-0.013938080246983", "0", "0.013454256086254", "0", "-0.013003489160657", "0", "0.012582469889852", "0", "-0.012188310772315", "0", "0.011818584714956", "0", "-0.011471169358299", "0", "0.011144082208602", "0", "-0.010835528004918", "0", "0.010544027490451", "0", "-0.010268316272171", "0", "0.010007117380252", "0", "-0.009759211324878", "0", "0.009523676838757", "0", "-0.009299758927712", "0", "0.009086557598268", "0", "-0.008883182776046", "0", "0.008689079447000", "0", "-0.008503801958784", "0", "0.008326650096089", "0", "-0.008156939797580", "0", "0.007994374502078", "0", "-0.007838702698588", "0", "0.007689320685736", "0", "-0.007545679774350", "0", "0.007407690391034", "0", "-0.007275219515252", "0", "0.007147680309141", "0", "-0.007024640549262", "0", "0.006906201634427", "0", "-0.006792260548964", "0", "0.006682197924732", "0", "-0.006575738409800", "0", "0.006473137378112", "0", "-0.006374219070479", "0", "0.006278355690561", "0", "-0.006185476549591", "0", "0.006095892798779", "0", "-0.006009302100837", "0", "0.005925155423643", "0", "-0.005843571689380", "0", "0.005764804336032", "0", "-0.005688454663122", "0", "0.005614123364796", "0", "-0.005542042188997", "0", "0.005472350447218", "0", "-0.005404619815629", "0", "0.005338612481341", "0", "-0.005274605927879", "0", "0.005212614485580", "0", "-0.005152213176345", "0", "0.005093332218960", "0", "-0.005036266451860", "0", "0.004980871936824", "0", "-0.004926756919342", "0", "0.004874054720733", "0", "-0.004823003247109", "0", "0.004773279625942", "0", "-0.004724636835620", "0", "0.004677371100699", "0", "-0.004631532976605", "0", "0.004586718771423", "0", "-0.004542924408592", "0", "0.004500464831644", "0", "-0.004459148885465", "0", "0.004418656087280", "0", "-0.004379222425400", "0", "0.004340998783801", "0", "-0.004303621081644", "0", "0.004267029785679", "0", "-0.004231542119279", "0", "0.004197003873487", "0", "-0.004163122004199", "0", "0.004130141881589", "0", "-0.004098179933047", "0", "0.004066875633355", "0", "-0.004036214250760", "0", "0.004006525553240", "0", "-0.003977678630022", "0", "0.003949330875258", "0", "-0.003921649808488", "0", "0.003894931300166", "0", "-0.003868917177509", "0", "0.003843296648700", "0", "-0.003818374760630", "0", "0.003794371286562", "0", "-0.003770887286012", "0", "0.003747838810980", "0", "-0.003725605666276", "0", "0.003703991432474", "0", "-0.003682735746915", "0", "0.003662325133773", "0", "-0.003642658276935", "0", "0.003622986831546", "0", "-0.003603900452643", "0", "0.003586173102685", "0", "-0.003568815850615", "0", "0.003551081703711", "0", "-0.003533777979210", "0", "0.003518491264333", "0", "-0.402770163388345"},
		{"0", "1.271394952644717", "0", "-0.418908924174358", "0", "0.245571575138300", "0", "-0.169385755345298", "0", "0.125729582605323", "0", "-0.097009562066101", "0", "0.076478923882815", "0", "-0.061000626530583", "0", "0.048918551516010", "0", "-0.039273241583373", "0", "0.031466063228896", "0", "-0.025099035277211", "0", "0.019892095009181", "0", "-0.015637742316596", "0", "0.012175062649524", "0", "-0.009374380172474", "0", "0.007127999698664", "0", "-0.005344544030635", "0", "0.003945451102087", "0", "-0.002862771540468", "0", "0.002037737358615", "0", "-0.001419770737502", "0", "0.000965726103163", "0", "-0.000639239547602", "0", "0.000410113532089", "0", "-0.000253701067931", "0", "0.000150277688521", "0", "-0.000084404781936", "0", "0.000044296653679", "0", "-0.000021207592430", "0", "0.000008855556142", "0", "-0.000003056946315"},
	},
	AbsMax: 60,
}
